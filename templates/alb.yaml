AWSTemplateFormatVersion: 2010-09-09

# Application Load Balancer (ALB)

# Infrastruttura
# ===============
# Load Balancer:
#   Subnet:
#     - PublicSubnet1
#     - PublicSubnet2
#     - PublicSubnet3
#
#   Security Group:
#     - Proto:tcp  FromPort:80  ToPort:80  CIDR:0.0.0.0/0
#
#   Target Group:
#     Porta: 80
#     Proto: HTTP
#     TargetType: ip
#     (I target vengono gestiti da ECS)
#
#   Listener: ALB:80 <-> Target Group:80
#
#   Listener rule:
#     Concedi solo il traffico che ha l'header X-Origin-CloudFront-Only,
#     con un valore ben specifico. (Valori impostati come parametri)

Parameters:
  ALBStickinessDuration:
    Description: Durata (in secondi) del cookie della sticky session
    Type: Number

  # Questo valore viene ottenuto tramite Makefile,
  # piuttosto che inserire un valore hardcoded.
  # ---
  # https://repost.aws/questions/QUqRO04PyvQBWBBPnacWNwgw/cloudformation-how-to-use-prefix-list-as-source
  # https://docs.aws.amazon.com/vpc/latest/userguide/working-with-aws-managed-prefix-lists.html
  CloudFrontPrefixListId:
    Description: ID della Managed Prefix List di AWS per CloudFront (com.amazonaws.global.cloudfront.origin-facing)
    Type: String

Resources:
  # Security Group del load balancer
  # Permette il traffico solo dagli indirizzi IP
  # nella prefix list gestita da AWS per CloudFront
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-LoadBalancerSG"
      GroupDescription: ALB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourcePrefixListId: !Ref CloudFrontPrefixListId
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-LoadBalancerSG"
        - Key: EnvType
          Value: !Ref EnvType

  # Load Balancer
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      # NOTA: Impostare a "dualstack" per avere IPv4 + IPv6
      IpAddressType: "ipv4"
      Name: !Sub "${AWS::StackName}-ALB"
      Scheme: internal
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroups:
        - !Ref LoadBalancerSG
      Type: application
      Tags:
        - Key: EnvType
          Value: !Ref EnvType

  # Load Balancer target group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      # Gli health check avvengono ogni 30s (default)
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      # NOTA: per abilitare il supporto dualstack (IPv4 + IPv6)
      # è necessario creare un altro TG con tipo "ipv6"
      IpAddressType: "ipv4"
      # Il setup iniziale di Wordpress restituisce HTTP 302,
      # quindi aggiungilo alla lista di codici OK.
      # Senza quest'opzione, ECS continua a creare nuove task,
      # perchè l'health check "fallisce".
      # ---
      # Valori ammessi: da 200 a 499
      Matcher:
        HttpCode: "200,302"
      Name: !Sub "${AWS::StackName}-ALBTargetGroup"
      # Porta su cui ricevere il traffico
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        # Sticky session
        # ==============
        # Senza sticky session, la sessione NON viene persistita,
        # rendendo impossibile il login, e la configurazione di Wordpress.
        #
        # Usiamo un cookie generato dal load balancer stesso (lb_cookie),
        # piuttosto che usare un cookie dell'applicazione (app_cookie)
        # in modo tale da non dover modificare Wordpress.
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: !Ref ALBStickinessDuration
        # Tipo di load balancing
        # =======================
        # Round Robin -> distribuisce le richieste ad un server,
        # in maniera "circolare". Non tiene conto del carico dei server.
        #
        # Least outstanding requests -> distribuisce le richieste al server
        # con il minor numero di carico/richiste, assicurandosi quindi
        # che nessun server venga caricato eccessivamente.
        - Key: load_balancing.algorithm.type
          Value: least_outstanding_requests
      VpcId: !Ref VPC
      TargetType: ip
      Tags:
        - Key: EnvType
          Value: !Ref EnvType

  # Load Balancer listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # Per creare un certificato SSL per l'ALB, bisogna:
      # 1. Avere un dominio gestito da Route53
      # 2. Il dominio risiede sull'account AWS che crea lo stack CF
      # 3. La validazione DNS è attiva
      #
      # Se la validazione DNS non è attiva, lo stack CF rimarrà nello
      # stato CREATE_IN_PROGRESS fin quando l'email di verifica non
      # verrà confermata, o viene creato manualmente il record CNAME.
      # ---
      # Certificates: ...
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      # Porta su cui ricevere il traffico
      Port: 80
      Protocol: HTTP
